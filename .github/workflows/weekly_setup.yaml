name: Weekly Branch Creation

on:
  schedule:
    - cron: '0 2 * * TUE'  # Runs at 2 AM every Tuesday
  workflow_dispatch:  # Allows manual triggering

jobs:
  create-weekly-branch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper branch creation
          ref: main  # Explicitly checkout main branch
          
      - name: Set up Git config
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Calculate week numbers and check branch existence
        id: check-branch
        run: |
          # Get date information
          CURRENT_WEEK=$(date +%V)
          PREV_WEEK=$(date -d "last week" +%V)
          YEAR=$(date +%Y)
          
          # Calculate the week for the branch name (previous week)
          BRANCH_WEEK=$(printf "%02d" $PREV_WEEK)
          # Calculate the week for the new folder (current week)
          FOLDER_WEEK=$(printf "%02d" $CURRENT_WEEK)
          
          BRANCH_NAME="week_${YEAR}_${BRANCH_WEEK}"
          
          # Get date ranges
          PREV_WEEK_START=$(date -d "last Tuesday" +%Y-%m-%d)
          PREV_WEEK_END=$(date -d "last Monday" +%Y-%m-%d)
          
          # Check if branch exists
          if git ls-remote --heads origin refs/heads/$BRANCH_NAME | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME already exists"
            echo "BRANCH_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Branch $BRANCH_NAME does not exist"
            echo "BRANCH_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Save all variables
          echo "BRANCH_WEEK=$BRANCH_WEEK" >> $GITHUB_ENV
          echo "FOLDER_WEEK=$FOLDER_WEEK" >> $GITHUB_ENV
          echo "YEAR=$YEAR" >> $GITHUB_ENV
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "WEEK_RANGE=${PREV_WEEK_START}_${PREV_WEEK_END}" >> $GITHUB_ENV
          
      - name: Create new branch and weekly folder
        if: env.BRANCH_EXISTS == 'false'
        run: |
          # Ensure we're on an up-to-date main branch
          git fetch origin main
          git checkout main
          git reset --hard origin/main
          
          # Create and checkout new branch
          git checkout -b ${{ env.BRANCH_NAME }}
          
          # Create new weekly folder for the upcoming week
          mkdir -p "reports_presentations/week_${{ env.FOLDER_WEEK }}"
          
          # Copy templates
          cp templates/report_template.tex "reports_presentations/week_${{ env.FOLDER_WEEK }}/report.tex"
          cp templates/presentation_template.tex "reports_presentations/week_${{ env.FOLDER_WEEK }}/presentation.tex"
          
          # Copy and process template markdown files
          # Read templates
          REPORT_TEMPLATE=$(cat templates/report_template.md)
          PRESENTATION_TEMPLATE=$(cat templates/presentation_template.md)
          
          # Replace template variables
          echo "$REPORT_TEMPLATE" | \
          sed "s/{{ week }}/${{ env.FOLDER_WEEK }}/g" | \
          sed "s/{{ date }}/$(date +%Y-%m-%d)/g" \
          > "reports_presentations/week_${{ env.FOLDER_WEEK }}/report.md"
          
          echo "$PRESENTATION_TEMPLATE" | \
          sed "s/{{ week }}/${{ env.FOLDER_WEEK }}/g" | \
          sed "s/{{ date }}/$(date +%Y-%m-%d)/g" \
          > "reports_presentations/week_${{ env.FOLDER_WEEK }}/presentation.md"
          
          # Commit and push
          git add .
          git commit -m "Initialize week ${{ env.FOLDER_WEEK }} (Branch: week ${{ env.BRANCH_WEEK }})"
          git push origin ${{ env.BRANCH_NAME }}
          
      - name: Update README
        if: env.BRANCH_EXISTS == 'false'
        run: |
          cat << EOF > README.md
          # Week ${{ env.BRANCH_WEEK }} Summary (${{ env.WEEK_RANGE }})
          
          ## Repository Structure
          
          - \`analysis/\`: Analysis scripts and mathematical models
          - \`reports_presentations/week_${{ env.FOLDER_WEEK }}/\`: Next week's report and presentation templates
          - \`assets/\`: Figures, data files, and other assets
          
          ## Important Dates
          
          - Week Start: $(date -d "last Tuesday" +%Y-%m-%d)
          - Week End: $(date -d "last Monday" +%Y-%m-%d)
          EOF
          
          git add README.md
          git commit -m "Add README for week ${{ env.BRANCH_WEEK }}"
          git push origin ${{ env.BRANCH_NAME }}
